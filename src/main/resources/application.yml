spring:
  jackson:
    time-zone:
      Europe/Rome
  application:
    name: "@project.artifactId@"
    version: "@project.version@"
  jmx.enabled: true
  config:
    activate:
      on-profile: default
  data:
    mongodb:
      database: ${MONGODB_DBNAME:mil}
      uri: ${MONGODB_URI:mongodb://localhost:27017}
      config:
        connectionPool:
          maxSize: ${MONGODB_CONNECTIONPOOL_MAX_SIZE:100}
          minSize: ${MONGODB_CONNECTIONPOOL_MIN_SIZE:5}
          maxWaitTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_WAIT_MS:120000}
          maxConnectionLifeTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTION_LIFE_MS:0}
          maxConnectionIdleTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTION_IDLE_MS:120000}
          maxConnecting: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTING:2}

  cloud:
    function:
      definition: consumerCommands
    stream:
      binders:
        kafka-message-core-in:
          type: kafka
          environment:
            spring.cloud.stream.kafka:
              binder:
                brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_LIST:${KAFKA_BROKER:}}
                configuration.sasl.jaas.config: ${KAFKA_MESSAGE_CORE_SASL_JAAS_CONFIG:}
        kafka-message-core-out:
          type: kafka
          environment:
            spring.cloud.stream.kafka:
              binder:
                brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_LIST:${KAFKA_BROKER:}}
                configuration.sasl.jaas.config: ${KAFKA_MESSAGE_CORE_OUT_SASL_JAAS_CONFIG:}
      bindings:
        consumerCommands-in-0:
          binder: kafka-message-core-in
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_MESSAGE_CORE:emd-courtesy-message}
          group: ${KAFKA_OUTCOME_GROUP_IN:consumerOutcomeGroup}
        messageSender-out-0:
          binder: kafka-message-core-out
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_MESSAGE_CORE:emd-courtesy-message}
      kafka:
        binder:
          auto-create-topics: false
          configuration:
            heartbeat.interval.ms: ${KAFKA_CONFIG_HEARTBEAT_INTERVAL_MS:3000}
            session.timeout.ms: ${KAFKA_CONFIG_SESSION_TIMEOUT_MS:30000}
            request.timeout.ms: ${KAFKA_CONFIG_REQUEST_TIMEOUT_MS:60000}
            metadata.max.age.ms: ${KAFKA_CONFIG_METADATA_MAX_AGE:180000}
            sasl.mechanism: ${KAFKA_CONFIG_SASL_MECHANISM:PLAIN}
            security.protocol: ${KAFKA_CONFIG_SECURITY_PROTOCOL:SASL_SSL}
            max.request.size: ${KAFKA_CONFIG_MAX_REQUEST_SIZE:1000000}
        bindings:
          messageSender-out--0:
            producer:
              configuration:
                connections.max.idle.ms: ${KAFKA_ONBOARDING_CONNECTION_MAX_IDLE_TIME:180000}
                retry.backoff.ms: ${KAFKA_ONBOARDING_KAFKA_RETRY_MS:${KAFKA_RETRY_MS:10000}}
                linger.ms: ${KAFKA_ONBOARDING_LINGER_MS:${KAFKA_LINGER_MS:2}}
                batch.size: ${KAFKA_ERONBOARDING_BATCH_SIZE:${KAFKA_BATCH_SIZE:16384}}
                metadata.max.idle.ms: ${KAFKA_ONBOARDING_METADATA_MAX_IDLE_MS:${KAFKA_METADATA_MAX_IDLE_MS:180000}}
          consumerCommands-in-0:
            consumer:
              startOffset: ${KAFKA_COMMANDS_REQUEST_START_OFFSET:${KAFKA_CONSUMER_CONFIG_START_OFFSET:earliest}}
              autoCommitOffset: false
              ackMode: MANUAL_IMMEDIATE
              ackTime: ${KAFKA_COMMANDS_ACK_MILLIS:500}
              standardHeaders: ${KAFKA_COMMANDS_STANDARD_HEADERS:${KAFKA_CONSUMER_CONFIG_STANDARD_HEADERS:both}}
              configuration:
                max.poll:
                  records: ${KAFKA_COMMANDS_MAX_POLL_SIZE:${KAFKA_CONSUMER_CONFIG_MAX_POLL_SIZE:500}}
                  interval.ms: ${KAFKA_COMMANDS_INTERVAL_TIMEOUT_MS:${KAFKA_CONFIG_MAX_POLL_INTERVAL_TIMEOUT_MS:300000}}
                connections.max.idle.ms: ${KAFKA_COMMANDS_REQUEST_CONNECTIONS_MAX_IDLE_MS:${KAFKA_CONSUMER_CONFIG_CONNECTIONS_MAX_IDLE_MS:180000}}
                socket.connection.setup.timeout:
                  max.ms: ${KAFKA_COMMANDS_REQUEST_CONNECTION_TIMEOUT_MAX_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MAX_MS:200000}}
                  ms: ${KAFKA_COMMANDS_REQUEST_CONNECTION_TIMEOUT_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MS:100000}}


app:
  message-core:
    build-delay-duration: ${BENEFICIARY_RULE_BUILD_DELAY_DURATION:PT1S}
  retry:
    max-retry: ${ERROR_MESSAGE_MAX_RETRY:3}
  token:
    client: ${HYPE_KEY:}
    clientId: ${HYPE_CLIENT:}
    grantType: ${GRANT_TYPE:client_credentials}
    tenantId: ${HYPE_TENANT:}

management:
  health:
    mongo.enabled: ${HEALTH_MONGO_ENABLED:false}
  endpoint:
    health:
      show-details: always
      probes.enabled: true
      group:
        readiness.include: "*"
        liveness.include: livenessState,diskSpace,ping
  endpoints:
    jmx:
      exposure.include: "*"
    web:
      exposure.include: info, health

rest-client:
  citizen:
    baseUrl: ${EMD_CITIZEN:http://emd-citizen}
  tpp:
    baseUrl: ${EMD_TPP:http://emd-tpp}